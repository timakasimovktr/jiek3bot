const { Telegraf, Scenes, session, Markup } = require("telegraf");
const pool = require("../db");

const MAX_RELATIVES = 3;

const colonies = [
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "10",
  "11",
  "12",
  "13",
  "14",
  "17",
  "20",
  "21",
  "22",
  "23",
  "24",
];

const paidColonies = ["24"]; // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–∏–π

const texts = {
  ru: {
    internal_error: "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    existing_pending:
      "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é.",
    phone_saved: "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–∏–º–∏—Ç–µ –æ—Ñ–µ—Ä—Ç—É.",
    offer_prompt:
      "üìú –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ü–£–ë–õ–ò–ß–ù–£–Æ –û–§–ï–†–¢–£ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω–∏–º–∞—é' –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:",
    read_offer: "üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –ü–£–ë–õ–ò–ß–ù–£–Æ –û–§–ï–†–¢–£",
    accept_offer: "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é",
    request_phone: "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É:",
    contact_button: "üü¢‚û°Ô∏è üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä ‚¨ÖÔ∏èüü¢",
    phone_accepted: "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç.",
    retry_phone:
      "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É. –ù–µ –ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º:",
    retry_contact_button: "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
    too_many_retries:
      "‚ùå –í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.",
    select_colony: "üèõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ö–û–õ–û–ù–ò–Æ:",
    colony_button: (c) => `üèõ ${c}-—è –∫–æ–ª–æ–Ω–∏—è ${c === "23" ? "–ú–£–ò–ö" : "–ñ–ò–≠–ö"}`,
    select_visit_type: "‚è≤Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –í–°–¢–†–ï–ß–ò:",
    short_visit: "üîµ 1-–¥–Ω–µ–≤–Ω–∞—è",
    long_visit: "üü¢ 2-–¥–Ω–µ–≤–Ω–∞—è",
    enter_full_name:
      "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è: (–§–ê–ú–ò–õ–ò–Ø –ò–ú–Ø –û–¢–ß–ï–°–¢–í–û)",
    cancel_text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
    invalid_name: "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
    enter_prisoner_name:
      "üë• –° –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è? –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ: (–§–ê–ú–ò–õ–ò–Ø –ò–ú–Ø –û–¢–ß–ï–°–¢–í–û)",
    invalid_prisoner:
      "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
    add_more_prompt: "‚ûï –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞? (–º–∞–∫—Å–∏–º—É–º 3)",
    yes_add: "–î–∞, –¥–æ–±–∞–≤–∏—Ç—å",
    no_done: "–ù–µ—Ç",
    max_reached: "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 3 —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
    new_relative: "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:",
    summary_title: "üìã –î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:",
    summary_colony: (colony) =>
      `üèõ –ö–æ–ª–æ–Ω–∏—è: ${colony}-—è ${colony === "23" ? "–ú–£–ò–ö" : "–ñ–ò–≠–ö"}`,
    summary_prisoner: (name) => `üë§ –ó–∞–∫–ª—é—á–µ–Ω–Ω—ã–π: ${name}`,
    summary_relative: (i, name) => `üë• –†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ ${i + 1}: ${name}`,
    confirm_prompt: "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?",
    confirm_button: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
    cancel_button: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
    booking_canceled: "‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–º–µ–Ω–µ–Ω–∞.",
    booking_saved: (position) =>
      `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüìä –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å: ${position}`,
    queue_status: "üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏",
    cancel_application: (id) => `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #${id}`,
    join_group: "ü´Ç –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ",
    group_button: "üìå –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É",
    admin_new: (id) => `üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞. ‚Ññ: ${id}`,
    admin_applicant: (name) => `üë• –ó–∞—è–≤–∏—Ç–µ–ª—å: ${name}`,
    admin_colony: (colony) =>
      `üèõ –ö–æ–ª–æ–Ω–∏—è: ${colony}-—è ${colony === "23" ? "–ú–£–ò–ö" : "–ñ–ò–≠–ö"}`,
    admin_date: (date) => `üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${date}`,
    admin_type: (isLong) => `‚è≤Ô∏è –¢–∏–ø: ${isLong ? "2-–¥–Ω–µ–≤–Ω–∞—è" : "1-–¥–Ω–µ–≤–Ω–∞—è"}`,
    admin_status: "üü° –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
    error: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    not_found: "‚ùå –û—à–∏–±–∫–∞: –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
    book_meeting: "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É",
    no_attempts_left: "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏.",
    payment_success: "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.",
    please_pay: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É Pay –≤ —Å—á–µ—Ç–µ.",
  },
  uz: {
    // ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –¥–æ–±–∞–≤—å—Ç–µ please_pay: "–ò–ª—Ç–∏–º–æ—Å, —Ç—û–ª–æ–≤–Ω–∏ “≥–∏—Å–æ–±-—Ñ–∞–∫—Ç—É—Ä–∞–¥–∞–≥–∏ Pay —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–± —è–∫—É–Ω–ª–∞–Ω–≥.")
  },
  uzl: {
    // ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
  },
};

function generateColonyKeyboard(lang) {
  const keyboard = [];
  for (let i = 0; i < colonies.length; i += 3) {
    const row = colonies
      .slice(i, i + 3)
      .map((c) =>
        Markup.button.callback(texts[lang].colony_button(c), `colony_${c}`)
      );
    keyboard.push(row);
  }
  return Markup.inlineKeyboard(keyboard);
}

const bookingWizard = new Scenes.WizardScene(
  "booking-wizard",

  // Step 0: Phone check and request (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    // ... (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ)
  },

  // Step 1: Accept only contact (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    // ... (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ)
  },

  // Step 2: Accept public offer (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    // ... (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ)
  },

  // Step 3: Select colony (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  async (ctx) => {
    const lang = ctx.session.language;
    console.log(
      `Step 3: User ${ctx.from.id} action: ${ctx.callbackQuery?.data}, message: ${ctx.message?.text}`
    );

    const data = ctx.callbackQuery?.data;

    if (
      !ctx.callbackQuery?.data ||
      !ctx.callbackQuery.data.startsWith("colony_")
    ) {
      await ctx.reply(texts[lang].select_colony, generateColonyKeyboard(lang));
      return;
    }

    await ctx.answerCbQuery();
    ctx.wizard.state.colony = ctx.callbackQuery.data.replace("colony_", "");

    ctx.wizard.state.relatives = [];
    ctx.wizard.state.currentRelative = {};
    ctx.wizard.state.prisoner_name = null;
    ctx.wizard.state.visit_type = null;
    ctx.wizard.state.paymentDone = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ colony
    const colony = ctx.wizard.state.colony;
    const phone = ctx.wizard.state.phone;
    let attempts = 0;
    const [attRows] = await pool.query(
      "SELECT attempts FROM users_attempts WHERE phone_number = ?",
      [phone]
    );
    if (attRows.length === 0) {
      await pool.query(
        "INSERT INTO users_attempts (phone_number, attempts) VALUES (?, 2)",
        [phone]
      );
      attempts = 2;
    } else {
      attempts = attRows[0].attempts;
    }

    const needsPayment = paidColonies.includes(colony) || attempts <= 0;

    if (!needsPayment) {
      // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
      await ctx.reply(
        texts[lang].select_visit_type,
        Markup.inlineKeyboard([
          [
            Markup.button.callback(texts[lang].short_visit, "short"),
            Markup.button.callback(texts[lang].long_visit, "long"),
          ],
        ])
      );
      return ctx.wizard.selectStep(5);
    } else {
      // –ü–ª–∞—Ç–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω–≤–æ–π—Å —Å—Ä–∞–∑—É
      await ctx.reply(texts[lang].no_attempts_left);
      try {
        await ctx.telegram.sendInvoice({
          chat_id: ctx.chat.id,
          title: "–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏",
          description: `–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –≤ –∫–æ–ª–æ–Ω–∏—é ${colony}`,
          payload: `booking_${ctx.from.id}_${colony}`,
          provider_token: process.env.PAYMENT_TOKEN,
          currency: "UZS",
          prices: [{ label: "–£—Å–ª—É–≥–∞", amount: 10000 }], // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—É–º–º—É
        });
      } catch (err) {
        console.error("Error sending invoice:", err);
        await ctx.reply(texts[lang].error);
        return ctx.scene.leave();
      }
      return ctx.wizard.next(); // –ö —à–∞–≥—É 4: –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    }
  },

  // Step 4: Payment waiting (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞)
  async (ctx) => {
    const lang = ctx.session.language;
    try {
      if (ctx.message?.successful_payment) {
        ctx.wizard.state.paymentDone = true;
        await ctx.reply(texts[lang].payment_success);
        await ctx.reply(
          texts[lang].select_visit_type,
          Markup.inlineKeyboard([
            [
              Markup.button.callback(texts[lang].short_visit, "short"),
              Markup.button.callback(texts[lang].long_visit, "long"),
            ],
          ])
        );
        return ctx.wizard.next(); // –ö —à–∞–≥—É 5
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ (—Ç–µ–∫—Å—Ç –∏ —Ç.–¥.)
        await ctx.reply(texts[lang].please_pay);
        return; // –û—Å—Ç–∞–µ–º—Å—è –≤ —à–∞–≥–µ 4
      }
    } catch (err) {
      console.error("Error in payment waiting step:", err);
      await ctx.reply(texts[lang].error);
      return ctx.scene.leave();
    }
  },

  // Step 5: Select visit type (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    // ... (–∫–∞–∫ —Ä–∞–Ω–µ–µ)
  },

  // Step 6: Full name (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    // ... (–∫–∞–∫ —Ä–∞–Ω–µ–µ)
  },

  // Step 7: Placeholder (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    return ctx.wizard.next();
  },

  // Step 8: Prisoner name (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    // ... (–∫–∞–∫ —Ä–∞–Ω–µ–µ)
  },

  // Step 9: Add more or done (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    // ... (–∫–∞–∫ —Ä–∞–Ω–µ–µ)
  },

  // Step 10: Final confirm or cancel (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async (ctx) => {
    // ... (–∫–∞–∫ —Ä–∞–Ω–µ–µ)
  }
);

// –§—É–Ω–∫—Ü–∏–∏ askAddMore, showSummary (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

// saveBooking (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: —É–º–µ–Ω—å—à–µ–Ω–∏–µ attempts –µ—Å–ª–∏ free)
async function saveBooking(ctx) {
  const lang = ctx.session.language;
  const { prisoner_name, relatives, visit_type, colony } = ctx.wizard.state;
  const chatId = ctx.chat.id;
  const paymentStatus = ctx.wizard.state.paymentDone ? 'paid' : 'free';
  const phone = ctx.wizard.state.phone;
  try {
    const [maxNumberRows] = await pool.query(
      `SELECT MAX(colony_application_number) as max_number
       FROM bookings
       WHERE colony = ?`,
      [colony]
    );
    const maxNumber = maxNumberRows[0].max_number || 0;
    const newColonyApplicationNumber = maxNumber + 1;

    const [result] = await pool.query(
      `INSERT INTO bookings (user_id, phone_number, visit_type, prisoner_name, relatives, colony, status, telegram_chat_id, colony_application_number, language, payment_status)
       VALUES (?, ?, ?, ?, ?, ?, 'pending', ?, ?, ?, ?)`,
      [
        ctx.from.id,
        phone,
        visit_type,
        prisoner_name,
        JSON.stringify(relatives),
        colony,
        chatId,
        newColonyApplicationNumber,
        lang,
        paymentStatus,
      ]
    );

    const bookingId = result.insertId;

    if (paymentStatus === 'free') {
      let attempts = 0;
      const [attRows] = await pool.query(
        "SELECT attempts FROM users_attempts WHERE phone_number = ?",
        [phone]
      );
      if (attRows.length) {
        attempts = attRows[0].attempts - 1;
        attempts = Math.max(0, attempts);
      }
      await pool.query(
        "INSERT INTO users_attempts (phone_number, attempts) VALUES (?, ?) ON DUPLICATE KEY UPDATE attempts = ?",
        [phone, attempts, attempts]
      );
    }

    await ctx.scene.leave();

    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ —Ä–∞–Ω–µ–µ: sendApplicationToClient, –ø–æ–∑–∏—Ü–∏—è, –º–µ–Ω—é, –≥—Ä—É–ø–ø–∞)
  } catch (err) {
    console.error("Error in saveBooking:", err);
    await ctx.reply(texts[lang].error);
  }
}

// sendApplicationToClient (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

module.exports = bookingWizard;