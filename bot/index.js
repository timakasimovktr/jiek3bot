const { Telegraf, Scenes, session, Markup } = require("telegraf");
require("dotenv").config();
const pool = require("../db");
const bookingWizard = require("./bookingScene");
const { message } = require("telegraf/filters");
const adminChatId = process.env.ADMIN_CHAT_ID;

const bot = new Telegraf(process.env.BOT_TOKEN);
const stage = new Scenes.Stage([bookingWizard]);

const fs = require("fs");
const path = require("path");
const PizZip = require("pizzip");
const Docxtemplater = require("docxtemplater");

bot.use(session());
bot.use(stage.middleware());

bot.use((ctx, next) => {
  if (ctx.chat?.type !== "private") {
    return;
  }
  return next();
});

bot.use(async (ctx, next) => {
  console.log(
    `Middleware: user ${ctx.from?.id}, ctx.wizard exists: ${!!ctx.wizard}, scene: ${
      ctx.scene?.current?.id || "none"
    }`
  );
  if (!ctx.session) ctx.session = {};
  if (!ctx.session.language) {
    const latest = await getLatestBooking(ctx.from?.id);
    ctx.session.language = latest?.language || "uzl"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é uzl
  }
  return next();
});

const texts = {
  ru: {
    greeting:
      "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ß–µ—Ä–µ–∑ —ç—Ç—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å –∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –≤ —Ç—é—Ä—å–º–µ.",
    process_canceled: "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.",
    error_occurred: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
    main_menu: "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
    already_in_process:
      "‚ùå –í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
    approved_status: `üéâ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. ‚Ññ: {id}\nüë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {name}`,
    pending_status: `üìä –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å: {pos}`,
    queue_not_found: "‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
    no_pending_application: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.",
    approved_details: `üéâ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. ‚Ññ: {id}\nüë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {name}\nüìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {created}\n‚åöÔ∏è –î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è: {visit}\nüèõÔ∏è –ö–æ–ª–æ–Ω–∏—è: {colony}\nüü¢ –°—Ç–∞—Ç—É—Å: –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`,
    status_unknown: "‚ùå –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.",
    no_booking_found: "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
    group_join_prompt: "ü´Ç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
    group_join_button: "üìå –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É",
    no_active_application: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.",
    coordinates_not_found: "‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–ª–æ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
    colony_location: "üèõ –õ–æ–∫–∞—Ü–∏—è –∫–æ–ª–æ–Ω–∏–∏ {colony}",
    cancel_confirm: "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?",
    cancel_no: "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
    no_cancel_booking: "‚ùå –ù–µ—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
    booking_not_found_or_canceled: "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
    application_canceled: "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
    new_booking_prompt: "üîÑ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.",
    unexpected_text_ignore:
      "User {id} in scene {scene}, ignoring unexpected text: {text}",
    global_error_reply:
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∑–∞–Ω–æ–≤–æ.",
    existing_application:
      "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ (‚Ññ: {id}, –°—Ç–∞—Ç—É—Å: {status}, –ó–∞—è–≤–∏—Ç–µ–ª—å: {name}). –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é.",
    booking_canceled: "‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–º–µ–Ω–µ–Ω–∞.",
    no_application: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.",
    file_not_found: "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    additional_info:
      "üìó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∏.", // Placeholder
    language_prompt: "üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    queue_status: "üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏",
    group_join: "ü´Ç –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É",
    application_copy: "üñ®Ô∏è –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –∑–∞—è–≤–∫–∏",
    additional_info_button: "üìó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    visitor_reminder: "üìÉ –ü–∞–º—è—Ç–∫–∞ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π",
    colony_location_button: "üèõÔ∏è –õ–æ–∫–∞—Ü–∏—è –∫–æ–ª–æ–Ω–∏–∏",
    cancel_application: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #{id}",
    book_meeting: "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É",
    yes: "‚úÖ –î–∞",
    no: "‚ùå –ù–µ—Ç",
    status_approved: "–æ–¥–æ–±—Ä–µ–Ω–æ",
    status_pending: "–æ–∂–∏–¥–∞–µ—Ç",
    change_language: "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
  },
  uz: {
    // Uzbek Cyrillic
    greeting:
      "üëã –ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º!\n–ë—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ä“õ–∞–ª–∏ —Å–∏–∑ “õ–∞–º–æ“õ—Ö–æ–Ω–∞ –º–∞“≥–±—É—Å–ª–∞—Ä–∏ –±–∏–ª–∞–Ω —É—á—Ä–∞—à—É–≤–≥–∞ —ë–∑–∏–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.",
    process_canceled: "‚ùå –ñ–∞—Ä–∞—ë–Ω –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.",
    error_occurred: "‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.",
    main_menu: "–ê—Å–æ—Å–∏–π –º–µ–Ω—é:",
    already_in_process:
      "‚ùå –°–∏–∑ –∞–ª–ª–∞“õ–∞—á–æ–Ω –∂–∞—Ä–∞—ë–Ω–¥–∞—Å–∏–∑. –ò–ª—Ç–∏–º–æ—Å, –∂–æ—Ä–∏–π –∂–∞—Ä–∞—ë–Ω–Ω–∏ —è–∫—É–Ω–ª–∞–Ω–≥ —ë–∫–∏ /cancel –±—É–π—Ä—É“ì–∏–Ω–∏ –∏—à–ª–∞—Ç–∏–Ω–≥.",
    approved_status: `üéâ –ê—Ä–∏–∑–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω. ‚Ññ: {id}\nüë§ –ê—Ä–∏–∑–∞—á–∏: {name}`,
    pending_status: `üìä –°–∏–∑–Ω–∏–Ω–≥ –Ω–∞–≤–±–∞—Ç–∏–Ω–≥–∏–∑: {pos}`,
    queue_not_found: "‚ùå –ù–∞–≤–±–∞—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.",
    no_pending_application: "‚ùå –°–∏–∑–¥–∞ “≥–æ–∑–∏—Ä–¥–∞ –∫—É—Ç–∞—ë—Ç–≥–∞–Ω –∞—Ä–∏–∑–∞ –π—û“õ.",
    approved_details: `üéâ –ê—Ä–∏–∑–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω. ‚Ññ: {id}\nüë§ –ê—Ä–∏–∑–∞—á–∏: {name}\nüìÖ –ë–µ—Ä–∏–ª–≥–∞–Ω —Å–∞–Ω–∞: {created}\n‚åöÔ∏è –ö–µ–ª–∏—à–∏ —Å–∞–Ω–∞: {visit}\nüèõÔ∏è –ö–æ–ª–æ–Ω–∏—è: {colony}\nüü¢ “≤–æ–ª–∞—Ç: –¢–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω`,
    status_unknown: "‚ùå –ê—Ä–∏–∑–∞ “≥–æ–ª–∞—Ç–∏ –Ω–æ–º–∞—ä–ª—É–º.",
    no_booking_found: "‚ùå “≤–æ–∑–∏—Ä–¥–∞ –∞—Ä–∏–∑–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.",
    group_join_prompt: "ü´Ç –¢—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥:",
    group_join_button: "üìå –ì—É—Ä—É“≥–≥–∞ —û—Ç–∏—à",
    no_active_application: "‚ùå –°–∏–∑–¥–∞ “≥–æ–∑–∏—Ä–¥–∞ —Ñ–∞–æ–ª –∞—Ä–∏–∑–∞ –π—û“õ.",
    coordinates_not_found: "‚ùå –ö–æ–ª–æ–Ω–∏–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–ª–∞—Ä–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.",
    colony_location: "üèõ {colony}-—Å–æ–Ω –ñ–ò–≠–ö –ª–æ–∫–∞—Ü–∏—è—Å–∏",
    cancel_confirm: "‚ùì –ê—Ä–∏–∑–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–º–æ“õ—á–∏–º–∏—Å–∏–∑?",
    cancel_no: "‚úÖ –ê—Ä–∏–∑–∞ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–º–∞–¥–∏.",
    no_cancel_booking: "‚ùå “≤–æ–∑–∏—Ä –±–µ–∫–æ—Ä “õ–∏–ª–∏—à —É—á—É–Ω –∞—Ä–∏–∑–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.",
    booking_not_found_or_canceled:
      "‚ùå –ê—Ä–∏–∑–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏ —ë–∫–∏ –∞–ª–ª–∞“õ–∞—á–æ–Ω –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–≥–∞–Ω.",
    application_canceled: "‚ùå –°–∏–∑–Ω–∏–Ω–≥ –∞—Ä–∏–∑–∞–Ω–≥–∏–∑ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.",
    new_booking_prompt:
      "üîÑ –Ø–Ω–≥–∏ —É—á—Ä–∞—à—É–≤–≥–∞ —ë–∑–∏–ª–∏—à —É—á—É–Ω –º–µ–Ω—é–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥.",
    unexpected_text_ignore:
      "User {id} in scene {scene}, ignoring unexpected text: {text}",
    global_error_reply:
      "‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏, –∏–ª—Ç–∏–º–æ—Å, /start –±—É–π—Ä—É“ì–∏–Ω–∏ “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏–Ω–≥.",
    existing_application:
      "‚ùå –°–∏–∑–¥–∞ –∞–ª–ª–∞“õ–∞—á–æ–Ω –∞—Ä–∏–∑–∞ –º–∞–≤–∂—É–¥ (‚Ññ: {id}, “≤–æ–ª–∞—Ç: {status}, –ê—Ä–∏–∑–∞—á–∏: {name}). –Ø–Ω–≥–∏ –∞—Ä–∏–∑–∞ —é–±–æ—Ä–∏—à —É—á—É–Ω –∞–≤–≤–∞–ª –∂–æ—Ä–∏–π –∞—Ä–∏–∑–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–≥.",
    booking_canceled: "‚ùå –£—á—Ä–∞—à—É–≤ —ë–∑—É–≤–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.",
    no_application: "‚ùå –°–∏–∑–¥–∞ “≥–æ–∑–∏—Ä–¥–∞ –∫—É—Ç–∞—ë—Ç–≥–∞–Ω –∞—Ä–∏–∑–∞ –π—û“õ.",
    file_not_found: "‚ùå –§–∞–π–ª —Ç–æ–ø–∏–ª–º–∞–¥–∏.",
    additional_info:
      "üìó “ö—û—à–∏–º—á–∞ –º–∞—ä–ª—É–º–æ—Ç: –ë—É –µ—Ä–¥–∞ —Ñ–æ–π–¥–∞–ª–∏ –º–∞—Ç–Ω —ë–∫–∏ “≥–∞–≤–æ–ª–∞–ª–∞—Ä –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω.", // Placeholder
    language_prompt: "üåê –ò–ª—Ç–∏–º–æ—Å, —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
    queue_status: "üìä –ù–∞–≤–±–∞—Ç “≥–æ–ª–∞—Ç–∏",
    group_join: "ü´Ç –ì—É—Ä—É“≥–≥–∞ —û—Ç–∏—à",
    application_copy: "üñ®Ô∏è –ê—Ä–∏–∑–∞ –Ω—É—Å—Ö–∞—Å–∏–Ω–∏ –æ–ª–∏—à",
    additional_info_button: "üìó “ö—û—à–∏–º—á–∞ –º–∞—ä–ª—É–º–æ—Ç",
    visitor_reminder: "üìÉ –¢–∞—à—Ä–∏—Ñ –±—É—é—Ä—É–≤—á–∏–ª–∞—Ä —É—á—É–Ω —ç—Å–ª–∞—Ç–º–∞",
    colony_location_button: "üèõÔ∏è –ö–æ–ª–æ–Ω–∏–∞ –ª–æ–∫–∞—Ü–∏—è—Å–∏",
    cancel_application: "‚ùå –ê—Ä–∏–∑–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à #{id}",
    book_meeting: "üìÖ –£—á—Ä–∞—à—É–≤–≥–∞ —ë–∑–∏–ª–∏—à",
    yes: "‚úÖ “≤–∞",
    no: "‚ùå –ô—û“õ",
    status_approved: "—Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω",
    status_pending: "–∫—É—Ç–º–æ“õ–¥–∞",
    change_language: "üåê –¢–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à",
  },
  uzl: {
    // Uzbek Latin (original)
    greeting:
      "üëã Assalomu alaykum!\nBu platforma orqali siz qamoqxona mahbuslari bilan uchrashuvga yozilishingiz mumkin.",
    process_canceled: "‚ùå Jarayon bekor qilindi.",
    error_occurred: "‚ùå Xatolik yuz berdi.",
    main_menu: "Asosiy menu:",
    already_in_process:
      "‚ùå Siz allaqachon jarayondasiz. Iltimos, joriy jarayonni yakunlang yoki /cancel buyrug‚Äòini ishlating.",
    approved_status: `üéâ Ariza tasdiqlangan. ‚Ññ: {id}\nüë§ Arizachi: {name}`,
    pending_status: `üìä Sizning navbatingiz: {pos}`,
    queue_not_found: "‚ùå Navbat topilmadi.",
    no_pending_application: "‚ùå Sizda hozirda kutayotgan ariza yo‚Äòq.",
    approved_details: `üéâ Ariza tasdiqlangan. ‚Ññ: {id}\nüë§ Arizachi: {name}\nüìÖ Berilgan sana: {created}\n‚åöÔ∏è Kelishi sana: {visit}\nüèõÔ∏è Koloniya: {colony}\nüü¢ Holat: Tasdiqlangan`,
    status_unknown: "‚ùå Ariza holati noma'lum.",
    no_booking_found: "‚ùå Hozirda ariza topilmadi.",
    group_join_prompt: "ü´Ç Tugmasini bosing:",
    group_join_button: "üìå Grupaga otish",
    no_active_application: "‚ùå Sizda hozirda faol ariza yo‚Äòq.",
    coordinates_not_found: "‚ùå Koloniya koordinatalari topilmadi.",
    colony_location: "üèõ {colony}-son JIEK lokatsiyasi",
    cancel_confirm: "‚ùì Arizani bekor qilmoqchimisiz?",
    cancel_no: "‚úÖ Ariza bekor qilinmadi.",
    no_cancel_booking: "‚ùå Hozir bekor qilish uchun ariza topilmadi.",
    booking_not_found_or_canceled:
      "‚ùå Ariza topilmadi yoki allaqachon bekor qilingan.",
    application_canceled: "‚ùå Sizning arizangiz bekor qilindi.",
    new_booking_prompt:
      "üîÑ Yangi uchrashuvga yozilish uchun menyudagi tugmani bosing.",
    unexpected_text_ignore:
      "User {id} in scene {scene}, ignoring unexpected text: {text}",
    global_error_reply:
      "‚ùå Xatolik yuz berdi, iltimos, /start buyrug‚Äòini qayta yuboring.",
    existing_application:
      "‚ùå Sizda allaqachon ariza mavjud (‚Ññ: {id}, Holat: {status}, Arizachi: {name}). Yangi ariza yuborish uchun avval joriy arizani bekor qiling.",
    booking_canceled: "‚ùå Uchrashuv yozuvi bekor qilindi.",
    no_application: "‚ùå Sizda hozirda kutayotgan ariza yo‚Äòq.",
    file_not_found: "‚ùå Fayl topilmadi.",
    additional_info:
      "üìó Qo‚Äòshimcha ma‚Äôlumot: Bu yerda foydali matn yoki havolalar bo‚Äòlishi mumkin.", // Placeholder
    language_prompt: "üåê Iltimos, tilni tanlang:",
    queue_status: "üìä Navbat holati",
    group_join: "ü´Ç Grupaga otish",
    application_copy: "üñ®Ô∏è Ariza nusxasini olish",
    additional_info_button: "üìó Qo‚Äòshimcha ma‚Äôlumot",
    visitor_reminder: "üìÉ Tashrif buyuruvchilar uchun eslatma",
    colony_location_button: "üèõÔ∏è Koloniya lokatsiyasi",
    cancel_application: "‚ùå Arizani bekor qilish #{id}",
    book_meeting: "üìÖ Uchrashuvga yozilish",
    yes: "‚úÖ Ha",
    no: "‚ùå Yo‚Äòq",
    status_approved: "tasdiqlangan",
    status_pending: "kutmoqda",
    change_language: "üåê Tilni o‚Äòzgartirish",
  },
};

async function getLatestPendingOrApprovedId(userId) {
  try {
    const [rows] = await pool.query(
      `SELECT colony_application_number
       FROM bookings
       WHERE status IN ('pending', 'approved') AND user_id = ?
       ORDER BY created_at DESC
       LIMIT 1`,
      [userId]
    );

    return rows.length ? rows[0].colony_application_number : null;
  } catch (err) {
    console.error("Error in getLatestPendingOrApprovedId:", err);
    throw err;
  }
}

async function getLatestBooking(userId) {
  try {
    const [rows] = await pool.query(
      `SELECT id, user_id, prisoner_name, colony, relatives, status, created_at, start_datetime, colony_application_number, language
       FROM bookings
       WHERE user_id = ? AND status IN ('pending', 'approved')
       ORDER BY created_at DESC
       LIMIT 1`,
      [userId]
    );

    return rows.length ? rows[0] : null;
  } catch (err) {
    console.error("Error in getLatestBooking:", err);
    throw err;
  }
}

async function getUserBookingStatus(userId) {
  return await getLatestBooking(userId); // Reuse the function
}

function buildMainMenu(lang, latestPendingNumber) {
  let rows = [];
  if (latestPendingNumber) {  // –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    rows = [
      [texts[lang].queue_status, texts[lang].group_join],
      [texts[lang].application_copy, texts[lang].additional_info_button],
      [texts[lang].visitor_reminder, texts[lang].colony_location_button],
    ];
    rows.push([
      texts[lang].cancel_application.replace("{id}", latestPendingNumber),
    ]);
    rows.push([texts[lang].change_language]);  // –î–æ–±–∞–≤–ª–µ–Ω–æ: –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –º–µ–Ω—é
  } else {  
    rows = [
      [texts[lang].book_meeting],
      [texts[lang].change_language],
    ];
  }

  return Markup.keyboard(rows).resize().persistent();
}

async function getQueuePosition(bookingId) {
  try {
    const [bookingsRows] = await pool.query(
      "SELECT colony, colony_application_number FROM bookings WHERE id = ?",
      [bookingId]
    );

    if (!bookingsRows.length) {
      console.log(`getQueuePosition: No booking found for ID ${bookingId}`);
      return null;
    }

    const colony = bookingsRows[0].colony;
    const colonyApplicationNumber = bookingsRows[0].colony_application_number;

    if (String(colony) === "5") {
      console.error(`Inconsistency: bookings has colony 5`);
    }

    const [rows] = await pool.query(
      "SELECT colony_application_number FROM bookings WHERE status = 'pending' AND colony = ? ORDER BY colony_application_number ASC",
      [colony]
    );
    console.log(
      `getQueuePosition: Fetched ${rows.length} pending bookings from bookings for colony ${colony}`
    );

    const numbers = rows.map((row) => row.colony_application_number);
    const position = numbers.indexOf(colonyApplicationNumber);
    return position !== -1 ? position + 1 : null;
  } catch (err) {
    console.error("Error in getQueuePosition:", err);
    throw err;
  }
}

async function resetSessionAndScene(ctx) {
  try {
    console.log(`Resetting session and scene for user ${ctx.from?.id}`);
    if (ctx.scene && ctx.scene.current) {
      console.log(`Leaving scene: ${ctx.scene.current.id}`);
      await ctx.scene.leave();
    }
    ctx.session = ctx.session || {};
    delete ctx.session.__scenes;
    console.log(`Session after reset:`, ctx.session);
  } catch (err) {
    console.error("Error in resetSessionAndScene:", err);
    throw err;
  }
}

bot.command("cancel", async (ctx) => {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const latestId = await getLatestPendingOrApprovedId(ctx.from.id);
    await ctx.reply(
      texts[lang].process_canceled,
      buildMainMenu(lang, latestId)
    );
  } catch (err) {
    console.error("Error in /cancel:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
});

bot.command("menu", async (ctx) => {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const latestId = await getLatestPendingOrApprovedId(ctx.from.id);
    await ctx.reply(texts[lang].main_menu, buildMainMenu(lang, latestId));
  } catch (err) {
    console.error("Error in /menu:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
});

bot.start(async (ctx) => {
  try {
    const lang = ctx.session.language;
    if (ctx.scene.current) {
      await ctx.reply(texts[lang].already_in_process);
      return;
    }

    await resetSessionAndScene(ctx);

    const userId = ctx.from.id;
    const latestBooking = await getLatestBooking(userId);
    const latestNumber = await getLatestPendingOrApprovedId(userId);

    if (latestBooking && latestBooking.status !== "canceled") {
      let relatives = [];
      try {
        relatives = JSON.parse(latestBooking.relatives || "[]");
      } catch (err) {
        relatives = [];
      }
      const rel1 = relatives[0] || {};
      const name =
        rel1.full_name ||
        (lang === "ru"
          ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
          : lang === "uz"
          ? "–ù–æ–º–∞—ä–ª—É–º"
          : "Noma'lum");

      if (latestBooking.status === "approved") {
        await ctx.reply(
          texts[lang].approved_status
            .replace("{id}", latestNumber) 
            .replace("{name}", name),
          buildMainMenu(lang, latestNumber)
        );
      } else if (latestBooking.status === "pending") {
        const pos = await getQueuePosition(latestBooking.id); // –ü–µ—Ä–µ–¥–∞–µ–º id, —Ç–∞–∫ –∫–∞–∫ getQueuePosition —Ä–∞–±–æ—Ç–∞–µ—Ç —Å id
        await ctx.reply(
          pos
            ? texts[lang].pending_status.replace("{pos}", pos)
            : texts[lang].queue_not_found,
          buildMainMenu(lang, latestNumber)
        );
      }
    } else {
      await ctx.reply(texts[lang].greeting, buildMainMenu(lang, null));
    }
  } catch (err) {
    console.error("Error in /start:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
});

bot.hears(texts.uzl.book_meeting, async (ctx) => handleBookMeeting(ctx));
bot.hears(texts.uz.book_meeting, async (ctx) => handleBookMeeting(ctx));
bot.hears(texts.ru.book_meeting, async (ctx) => handleBookMeeting(ctx));

async function handleBookMeeting(ctx) {
  try {
    await resetSessionAndScene(ctx);
    const latest = await getLatestBooking(ctx.from.id);

    if (latest && latest.language && !ctx.session.language) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
      ctx.session.language = latest.language;
    }

    if (!ctx.session.language) {
      // –°–ø—Ä–∞—à–∏–≤–∞–µ–º —è–∑—ã–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      await ctx.reply(
        texts[ctx.session.language || "uzl"].language_prompt,
        Markup.inlineKeyboard([
          [Markup.button.callback("üá∫üáø O‚Äòzbekcha (lotin)", "lang_uzl")],
          [Markup.button.callback("üá∫üáø –é–∑–±–µ–∫—á–∞ (–∫–∏—Ä–∏–ª–ª)", "lang_uz")],
          [Markup.button.callback("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru")],
        ])
      );
    } else {
      // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É, –µ—Å–ª–∏ —è–∑—ã–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      await ctx.scene.enter("booking-wizard");
    }
  } catch (err) {
    console.error("Error in book meeting:", err);
    await ctx.reply(texts[ctx.session.language || "uzl"].error_occurred);
  }
}

bot.action("choose_language", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    texts[ctx.session.language].language_prompt,
    Markup.inlineKeyboard([
      [Markup.button.callback("üá∫üáø O‚Äòzbekcha (lotin)", "lang_uzl")],
      [Markup.button.callback("üá∫üáø –é–∑–±–µ–∫—á–∞ (–∫–∏—Ä–∏–ª–ª)", "lang_uz")],
      [Markup.button.callback("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru")],
    ])
  );
});

bot.action(["lang_uzl", "lang_uz", "lang_ru"], async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.editMessageReplyMarkup({
      reply_markup: { inline_keyboard: [] },
    });

    ctx.session.language = ctx.match[0].replace("lang_", "");
    delete ctx.session.__scenes;

    console.log(
      `Entering booking-wizard for user ${ctx.from.id} with language ${ctx.session.language}`
    );
    await ctx.scene.enter("booking-wizard");
  } catch (err) {
    console.error(`Error in language selection for user ${ctx.from.id}:`, err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
});

bot.action("start_booking", async (ctx) => {
  try {
    const lang = ctx.session.language;
    const userId = ctx.from.id;
    const existingBookingId = await getLatestPendingOrApprovedId(userId);

    if (existingBookingId) {
      const booking = await getLatestBooking(userId);
      let relatives = [];
      try {
        relatives = JSON.parse(booking.relatives || "[]");
      } catch (err) {
        console.error(
          `JSON parse error for booking ${existingBookingId}:`,
          err
        );
        relatives = [];
      }
      const rel1 = relatives[0] || {};
      const name =
        rel1.full_name ||
        (lang === "ru"
          ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
          : lang === "uz"
          ? "–ù–æ–º–∞—ä–ª—É–º"
          : "Noma'lum");
      const statusText =
        booking.status === "approved"
          ? texts[lang].status_approved
          : texts[lang].status_pending;

      await ctx.answerCbQuery();
      return ctx.reply(
        texts[lang].existing_application
          .replace("{id}", existingBookingId)
          .replace("{status}", statusText)
          .replace("{name}", name),
        buildMainMenu(lang, existingBookingId)
      );
    }

    const language_before_reset = ctx.session.language;
    await resetSessionAndScene(ctx);
    ctx.session.language = language_before_reset;
    console.log(`Entering booking-wizard for user ${ctx.from.id}`);
    await ctx.answerCbQuery();
    await ctx.scene.enter("booking-wizard");
  } catch (err) {
    console.error("Error in start_booking:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
});

bot.action("cancel", async (ctx) => {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const latestId = await getLatestPendingOrApprovedId(ctx.from.id);
    await ctx.answerCbQuery();
    await ctx.reply(
      texts[lang].booking_canceled,
      buildMainMenu(lang, latestId)
    );
  } catch (err) {
    console.error("Error in cancel action:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
});

bot.hears(texts.uzl.queue_status, async (ctx) => handleQueueStatus(ctx));
bot.hears(texts.uz.queue_status, async (ctx) => handleQueueStatus(ctx));
bot.hears(texts.ru.queue_status, async (ctx) => handleQueueStatus(ctx));

async function handleQueueStatus(ctx) {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const latestBooking = await getLatestBooking(ctx.from.id);
    if (!latestBooking || latestBooking.status === "canceled") {
      return ctx.reply(
        texts[lang].no_pending_application,
        buildMainMenu(lang, null)
      );
    }
    const latestId = latestBooking.id;  // –î–ª—è getQueuePosition –Ω—É–∂–µ–Ω primary id
    const latestNumber = latestBooking.colony_application_number;  // –ò–∑–º–µ–Ω–µ–Ω–æ: –¥–ª—è –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–µ–º colony_application_number
    const colony = latestBooking.colony;
    let relatives = [];
    try {
      relatives = JSON.parse(latestBooking.relatives || "[]");
    } catch (err) {
      console.error(`JSON parse error for booking ${latestId}:`, err);
      relatives = [];
    }
    const rel1 = relatives[0] || {};
    const name =
      rel1.full_name ||
      (lang === "ru" ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : lang === "uz" ? "–ù–æ–º–∞—ä–ª—É–º" : "Noma'lum");
    const colony_application_number = latestBooking.colony_application_number;  
    // const locale = lang === "ru" ? "ru-RU" : "uz-UZ";

    if (latestBooking.status === "approved") {
      let visitDate = latestBooking.start_datetime
        ? new Date(
            new Date(latestBooking.start_datetime).setDate(
              new Date(latestBooking.start_datetime).getDate() + 1
            )
          ).toLocaleString("uz-UZ", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            timeZone: "Asia/Tashkent",
          })
        : lang === "ru"
        ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        : lang === "uz"
        ? "–ù–æ–º–∞—ä–ª—É–º"
        : "Noma'lum";
      let createdDate = new Date(latestBooking.created_at).toLocaleString(
        "uz-UZ",
        {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          timeZone: "Asia/Tashkent",
        }
      );

      createdDate = createdDate.replace(".", "/");
      createdDate = createdDate.replace(".2", "/2");
      visitDate = visitDate.replace(".", "/");
      visitDate = visitDate.replace(".2", "/2");

      await ctx.reply(
        texts[lang].approved_details
          .replace("{id}", colony_application_number)
          .replace("{name}", name)
          .replace("{colony}", colony)
          .replace("{created}", createdDate)
          .replace("{visit}", visitDate),
        buildMainMenu(lang, latestNumber)  // –ò–∑–º–µ–Ω–µ–Ω–æ: latestNumber –≤–º–µ—Å—Ç–æ latestId
      );
      return;
    } else if (latestBooking.status === "pending") {
      const pos = await getQueuePosition(latestId);
      await ctx.reply(
        pos
          ? texts[lang].pending_status.replace("{pos}", pos)
          : texts[lang].queue_not_found,
        buildMainMenu(lang, latestNumber)  // –ò–∑–º–µ–Ω–µ–Ω–æ: latestNumber –≤–º–µ—Å—Ç–æ latestId
      );
    } else {
      await ctx.reply(
        texts[lang].status_unknown,
        buildMainMenu(lang, latestNumber)  // –ò–∑–º–µ–Ω–µ–Ω–æ: latestNumber –≤–º–µ—Å—Ç–æ latestId
      );
    }
  } catch (err) {
    console.error("Error in queue status:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.hears(texts.uzl.group_join, async (ctx) => handleGroupJoin(ctx));
bot.hears(texts.uz.group_join, async (ctx) => handleGroupJoin(ctx));
bot.hears(texts.ru.group_join, async (ctx) => handleGroupJoin(ctx));

async function handleGroupJoin(ctx) {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const latestBooking = await getLatestBooking(ctx.from.id);
    if (!latestBooking) {
      await ctx.reply(texts[lang].no_booking_found);
      return;
    }

    const colony = latestBooking.colony;
    let groupUrl = "https://t.me/+qWg7Qh3t_OIxMDBi";

    switch (colony) {
      case "1":
        groupUrl = "https://t.me/SmartJIEK1";
        break;
      case "2":
        groupUrl = "https://t.me/SmartJIEK2";
        break;
      case "3":
        groupUrl = "https://t.me/SmartJIEK3";
        break;
      case "4":
        groupUrl = "https://t.me/SmartJIEK4";
        break;
      case "5":
        groupUrl = "https://t.me/SmartJIEK5";
        break;
      case "6":
        groupUrl = "https://t.me/SmartJIEK6";
        break;
      case "7":
        groupUrl = "https://t.me/SmartJIEK7";
        break;
      case "10":
        groupUrl = "https://t.me/SmartJIEK10";
        break;
      case "11":
        groupUrl = "https://t.me/SmartJIEK11";
        break;
      case "12":
        groupUrl = "https://t.me/SmartJIEK12";
        break;
      case "13":
        groupUrl = "https://t.me/SmartJIEK13";
        break;
      case "14":
        groupUrl = "https://t.me/SmartJIEK14";
        break;
      case "17":
        groupUrl = "https://t.me/SmartJIEK17";
        break;
      case "20":
        groupUrl = "https://t.me/SmartJIEK20";
        break;
      case "21":
        groupUrl = "https://t.me/SmartJIEK21";
        break;
      case "22":
        groupUrl = "https://t.me/SmartJIEK22";
        break;
      case "23":
        groupUrl = "https://t.me/SmartJIEK23";
        break;
      case "24":
        groupUrl = "https://t.me/SmartJIEK24";
        break;
    }

    await ctx.reply(
      texts[lang].group_join_prompt,
      Markup.inlineKeyboard([
        [Markup.button.url(texts[lang].group_join_button, groupUrl)],
      ])
    );
  } catch (err) {
    console.error("Error in group join:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.hears(texts.uzl.colony_location_button, async (ctx) =>
  handleColonyLocation(ctx)
);
bot.hears(texts.uz.colony_location_button, async (ctx) =>
  handleColonyLocation(ctx)
);
bot.hears(texts.ru.colony_location_button, async (ctx) =>
  handleColonyLocation(ctx)
);

async function handleColonyLocation(ctx) {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const latestBooking = await getLatestBooking(ctx.from.id);
    if (!latestBooking || latestBooking.status === "canceled") {
      return ctx.reply(
        texts[lang].no_active_application,
        buildMainMenu(lang, null)
      );
    }

    const colony = latestBooking.colony;
    const latestNumber = latestBooking.colony_application_number;  // –ò–∑–º–µ–Ω–µ–Ω–æ: –¥–ª—è –º–µ–Ω—é
    const [coordRows] = await pool.query(
      "SELECT longitude, latitude FROM coordinates WHERE id = ?",
      [colony]
    );

    if (!coordRows.length) {
      return ctx.reply(texts[lang].coordinates_not_found);
    }

    const { longitude, latitude } = coordRows[0];
    await ctx.replyWithLocation(longitude, latitude);
    await ctx.reply(
      texts[lang].colony_location.replace("{colony}", colony),
      buildMainMenu(lang, latestNumber)  // –ò–∑–º–µ–Ω–µ–Ω–æ: latestNumber –≤–º–µ—Å—Ç–æ id
    );
  } catch (err) {
    console.error("Error in colony location:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.hears(texts.uzl.no, async (ctx) => handleNoCancel(ctx));
bot.hears(texts.uz.no, async (ctx) => handleNoCancel(ctx));
bot.hears(texts.ru.no, async (ctx) => handleNoCancel(ctx));

async function handleNoCancel(ctx) {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    ctx.session.confirmCancel = false;
    ctx.session.confirmCancelId = null;

    const latestId = await getLatestPendingOrApprovedId(ctx.from.id);

    await ctx.reply(texts[lang].cancel_no, buildMainMenu(lang, latestId));
  } catch (err) {
    console.error("Error in no cancel:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.hears(/^‚ùå Arizani bekor qilish(?:\s*#(\d+))?$/i, async (ctx) =>
  handleCancelApplication(ctx)
); // uzl
bot.hears(/^‚ùå –ê—Ä–∏–∑–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à(?:\s*#(\d+))?$/i, async (ctx) =>
  handleCancelApplication(ctx)
); // uz
bot.hears(/^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É(?:\s*#(\d+))?$/i, async (ctx) =>
  handleCancelApplication(ctx)
); // ru

async function handleCancelApplication(ctx) {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const explicitNumber = ctx.match && ctx.match[1] ? Number(ctx.match[1]) : null;
    const latestNumber =
      explicitNumber || (await getLatestPendingOrApprovedId(ctx.from.id));

    if (!latestNumber) {
      await ctx.reply(
        texts[lang].new_booking_prompt,
        buildMainMenu(lang, null)
      );
      return;
    }

    // –ò–∑–º–µ–Ω–µ–Ω–æ: –ø–æ–∏—Å–∫ –ø–æ colony_application_number, –∞ –Ω–µ –ø–æ id
    const [bookingRows] = await pool.query(
      "SELECT id FROM bookings WHERE colony_application_number = ? AND user_id = ?",
      [latestNumber, ctx.from.id]
    );

    if (!bookingRows.length) {
      await ctx.reply(
        texts[lang].booking_not_found_or_canceled,
        buildMainMenu(lang, null)
      );
      return;
    }

    const bookingId = bookingRows[0].id;

    ctx.session.confirmCancel = true;
    ctx.session.confirmCancelId = bookingId;

    await ctx.reply(
      texts[lang].cancel_confirm,
      Markup.keyboard([[texts[lang].yes, texts[lang].no]]).resize()
    );
  } catch (err) {
    console.error("Error in cancel application:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.hears(texts.uzl.yes, async (ctx) => handleYesCancel(ctx));
bot.hears(texts.uz.yes, async (ctx) => handleYesCancel(ctx));
bot.hears(texts.ru.yes, async (ctx) => handleYesCancel(ctx));

async function handleYesCancel(ctx) {
  try {
    const lang = ctx.session.language;
    const bookingId = ctx.session.confirmCancelId;
    if (!ctx.session.confirmCancel || !bookingId) {
      await resetSessionAndScene(ctx);
      return ctx.reply(texts[lang].no_cancel_booking);
    }

    ctx.session.confirmCancel = false;
    ctx.session.confirmCancelId = null;

    const [bookingsRows] = await pool.query(
      "SELECT colony, relatives, colony_application_number FROM bookings WHERE id = ? AND user_id = ?",
      [bookingId, ctx.from.id]
    );

    if (!bookingsRows.length) {
      await resetSessionAndScene(ctx);
      return ctx.reply(texts[lang].booking_not_found_or_canceled);
    }

    const colony = bookingsRows[0].colony;
    const colonyApplicationNumber = bookingsRows[0].colony_application_number;
    let bookingName =
      lang === "ru" ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : lang === "uz" ? "–ù–æ–º–∞—ä–ª—É–º" : "Noma'lum";

    if (bookingsRows[0].relatives) {
      try {
        const relatives = JSON.parse(bookingsRows[0].relatives);
        if (Array.isArray(relatives) && relatives.length > 0) {
          bookingName = relatives[0].full_name || bookingName;
        }
      } catch (e) {
        console.error("JSON parse error for booking cancellation:", e);
      }
    }

    const [result] = await pool.query(
      "DELETE FROM bookings WHERE id = ? AND user_id = ?",
      [bookingId, ctx.from.id]
    );

    if (result.affectedRows === 0) {
      console.log(
        `Deletion failed: No rows affected for bookingId=${bookingId}, user_id=${ctx.from.id}`
      );
      await resetSessionAndScene(ctx);
      return ctx.reply(texts[lang].booking_not_found_or_canceled);
    }

    const latestNumberAfterDelete = await getLatestPendingOrApprovedId(ctx.from.id);
    await ctx.reply(
      texts[lang].application_canceled,
      buildMainMenu(lang, latestNumberAfterDelete)
    );

    await resetSessionAndScene(ctx);
  } catch (err) {
    console.error("Error in yes cancel:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.on(message("text"), async (ctx, next) => {
  try {
    const lang = ctx.session.language;
    const latestId = await getLatestPendingOrApprovedId(ctx.from.id);
    buildMainMenu(lang, latestId);

    if (ctx.scene && ctx.scene.current) {
      console.log(
        texts[lang].unexpected_text_ignore
          .replace("{id}", ctx.from.id)
          .replace("{scene}", ctx.scene.current.id)
          .replace("{text}", ctx.message.text)
      );
      return;
    }

    await next();
  } catch (err) {
    console.error("Error in text handler:", err);
    await ctx.reply(texts[ctx.session.language].global_error_reply);
  }
});

bot.catch((err, ctx) => {
  console.error("Global error:", err);
  const lang = ctx.session?.language || "uzl"; 
  if (err.response && err.response.error_code === 403) {
    console.warn(`‚ö†Ô∏è User ${ctx.from?.id} blocked the bot, skip message`);
  } else {
    ctx.reply(texts[lang].global_error_reply);
  }
});

bot.hears("Yangi ariza yuborish", async (ctx) => {
  // Legacy, assume uzl
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const userId = ctx.from.id;
    const existingBookingId = await getLatestPendingOrApprovedId(userId);

    if (existingBookingId) {
      const booking = await getLatestBooking(userId);
      let relatives = [];
      try {
        relatives = JSON.parse(booking.relatives || "[]");
      } catch (err) {
        console.error(
          `JSON parse error for booking ${existingBookingId}:`,
          err
        );
        relatives = [];
      }
      const rel1 = relatives[0] || {};
      const name =
        rel1.full_name ||
        (lang === "ru"
          ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
          : lang === "uz"
          ? "–ù–æ–º–∞—ä–ª—É–º"
          : "Noma'lum");
      const statusText =
        booking.status === "approved"
          ? texts[lang].status_approved
          : texts[lang].status_pending;

      return ctx.reply(
        texts[lang].existing_application
          .replace("{id}", existingBookingId)
          .replace("{status}", statusText)
          .replace("{name}", name),
        buildMainMenu(lang, existingBookingId)
      );
    }

    await ctx.scene.enter("booking-wizard");
  } catch (err) {
    console.error("Error in new application:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
});

bot.hears(texts.uzl.application_copy, async (ctx) =>
  handleApplicationCopy(ctx)
);
bot.hears(texts.uz.application_copy, async (ctx) => handleApplicationCopy(ctx));
bot.hears(texts.ru.application_copy, async (ctx) => handleApplicationCopy(ctx));

async function handleApplicationCopy(ctx) {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const latestBooking = await getLatestBooking(ctx.from.id);
    if (!latestBooking) {
      return ctx.reply(texts[lang].no_application, buildMainMenu(lang, null));
    }
    const booking = latestBooking;

    const [libRows] = await pool.query("SELECT * FROM library LIMIT 1");
    const library = libRows[0] || { placeNumber: "", commander: "" };

    let relatives = [];
    try {
      relatives = booking.relatives ? JSON.parse(booking.relatives) : [];
    } catch (e) {
      console.error(
        `JSON parse error for booking ${booking.id} in document generation:`,
        e
      );
    }

    const rel1 = relatives[0] || {};
    const rel2 = relatives[1] || {};
    const rel3 = relatives[2] || {};

    let templatePath = path.join(__dirname, `ariza_${lang}.docx`);
    if (!fs.existsSync(templatePath)) {
      templatePath = path.join(__dirname, "ariza.docx"); // Fallback
    }
    const content = fs.readFileSync(templatePath, "binary");
    const zip = new PizZip(content);

    const doc = new Docxtemplater(zip, {
      paragraphLoop: true,
      linebreaks: true,
    });

    // const locale = lang === "ru" ? "ru-RU" : "uz-UZ";

    doc.render({
      placeNumber: library.placeNumber,
      commander: library.commander,
      fullname: rel1.full_name || "",
      fullname2:
        rel2.full_name ||
        "____________________________________________________",
      fullname3:
        rel3.full_name ||
        "____________________________________________________",
      prisoner: booking.prisoner_name || "",
      arizaNumber: booking.colony_application_number || "",
      today: new Date().toLocaleDateString("uz-UZ"),
    });

    const buf = doc.getZip().generate({ type: "nodebuffer" });

    await ctx.replyWithDocument({
      source: buf,
      filename: `ariza_${booking.colony_application_number}.docx`,
    });
  } catch (err) {
    console.error("Error in application copy:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.hears(texts.uzl.visitor_reminder, async (ctx) =>
  handleVisitorReminder(ctx)
);
bot.hears(texts.uz.visitor_reminder, async (ctx) => handleVisitorReminder(ctx));
bot.hears(texts.ru.visitor_reminder, async (ctx) => handleVisitorReminder(ctx));

async function handleVisitorReminder(ctx) {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    const pdfFile = `tashrif_${lang}.pdf`;
    const pdfPath = path.join(__dirname, pdfFile);
    if (fs.existsSync(pdfPath)) {
      await ctx.replyWithDocument({ source: pdfPath });
    } else {
      await ctx.reply(texts[lang].file_not_found);
    }
  } catch (err) {
    console.error("Error in visitor reminder:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.hears(texts.uzl.additional_info_button, async (ctx) =>
  handleAdditionalInfo(ctx)
);
bot.hears(texts.uz.additional_info_button, async (ctx) =>
  handleAdditionalInfo(ctx)
);
bot.hears(texts.ru.additional_info_button, async (ctx) =>
  handleAdditionalInfo(ctx)
);

async function handleAdditionalInfo(ctx) {
  try {
    const lang = ctx.session.language;
    await resetSessionAndScene(ctx);
    await ctx.reply(texts[lang].additional_info);
  } catch (err) {
    console.error("Error in additional info:", err);
    await ctx.reply(texts[ctx.session.language].error_occurred);
  }
}

bot.hears(texts.uzl.change_language, async (ctx) => handleChangeLanguage(ctx));
bot.hears(texts.uz.change_language, async (ctx) => handleChangeLanguage(ctx));
bot.hears(texts.ru.change_language, async (ctx) => handleChangeLanguage(ctx));

async function handleChangeLanguage(ctx) {
  try {
    await resetSessionAndScene(ctx);
    await ctx.reply(
      texts[ctx.session.language || "uzl"].language_prompt,
      Markup.inlineKeyboard([
        [Markup.button.callback("üá∫üáø O‚Äòzbekcha (lotin)", "ch_lang_uzl")],
        [Markup.button.callback("üá∫üáø –é–∑–±–µ–∫—á–∞ (–∫–∏—Ä–∏–ª–ª)", "ch_lang_uz")],
        [Markup.button.callback("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ch_lang_ru")],
      ])
    );
  } catch (err) {
    console.error("Error in change language:", err);
    await ctx.reply(texts[ctx.session.language || "uzl"].error_occurred);
  }
}

bot.action(["ch_lang_uzl", "ch_lang_uz", "ch_lang_ru"], async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.editMessageReplyMarkup({
      reply_markup: { inline_keyboard: [] },
    });

    ctx.session.language = ctx.match[0].replace("ch_lang_", "");
    const lang = ctx.session.language;
    const latestId = await getLatestPendingOrApprovedId(ctx.from.id);
    await ctx.reply(texts[lang].main_menu, buildMainMenu(lang, latestId));
  } catch (err) {
    console.error(`Error in change language selection for user ${ctx.from.id}:`, err);
    await ctx.reply(texts[ctx.session.language || "uzl"].error_occurred);
  }
});

bot.launch().then(() => console.log("üöÄ Bot ishga tushdi"));
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));