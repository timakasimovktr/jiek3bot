const { Telegraf, Scenes, session, Markup } = require("telegraf");
const pool = require("../db");

const MAX_RELATIVES = 3;

const colonies = [
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "10",
  "11",
  "12",
  "13",
  "14",
  "17",
  "20",
  "21",
  "22",
  "23",
  "24",
];

function generateColonyKeyboard(page) {
  const perPage = 6;
  const start = page * perPage;
  const end = start + perPage;
  const pageColonies = colonies.slice(start, end);

  let keyboard = [];
  for (let i = 0; i < pageColonies.length; i += 3) {
    let row = pageColonies
      .slice(i, i + 3)
      .map((c) => Markup.button.callback(`${c}-—Å–æ–Ω JIEK`, `colony_${c}`));
    keyboard.push(row);
  }

  let navRow = [];
  if (page > 0) navRow.push(Markup.button.callback("Oldingi", "prev_colony"));
  if (end < colonies.length)
    navRow.push(Markup.button.callback("Keyingi", "next_colony"));

  if (navRow.length > 0) keyboard.push(navRow);

  return Markup.inlineKeyboard(keyboard);
}

const bookingWizard = new Scenes.WizardScene(
  "booking-wizard",

  // Step 0: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  async (ctx) => {
    try {
      console.log(`Step 0: Starting for user ${ctx.from.id}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ctx.wizard —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!ctx.wizard) {
        console.error(`ctx.wizard is undefined for user ${ctx.from.id}`);
        await ctx.reply(
          "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        );
        return ctx.scene.leave();
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã
      ctx.wizard.state = {};

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
      const [rows] = await pool.query(
        "SELECT * FROM bookings WHERE user_id = ? AND status = 'pending' ORDER BY id DESC LIMIT 1",
        [ctx.from.id]
      );
      console.log(`Step 0: Pending bookings for user ${ctx.from.id}:`, rows);

      if (rows.length > 0) {
        await ctx.reply(
          "‚ö†Ô∏è Sizda hali tugallanmagan ariza mavjud. Yangi ariza yaratish uchun uni yakunlang yoki bekor qiling.",
          Markup.keyboard([
            ["üìä Navbat holati"],
            ["‚ùå Arizani bekor qilish"],
          ]).resize()
        );
        return ctx.scene.leave();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const [userRows] = await pool.query(
        "SELECT phone_number FROM bookings WHERE user_id = ? ORDER BY id DESC LIMIT 1",
        [ctx.from.id]
      );
      console.log(
        `Step 0: Phone query result for user ${ctx.from.id}:`,
        userRows
      );

      if (userRows.length > 0 && userRows[0].phone_number) {
        ctx.wizard.state.phone = userRows[0].phone_number;
        ctx.wizard.state.offerRequested = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await ctx.reply(
          `‚úÖ Telefon raqamingiz saqlangan. Ofertani qabul qiling.`,
          Markup.removeKeyboard()
        );
        // –Ø–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –æ—Ñ–µ—Ä—Ç—ã
        await ctx.reply(
          "üìú Iltimos, publychnaya ofertani o‚Äòqing va qabul qilish uchun 'Qabul qilaman' tugmasini bosing:",
          Markup.inlineKeyboard([
            [
              Markup.button.url(
                "üìñ Ofertani o‚Äòqish",
                "https://telegra.ph/PUBLICHNAYA-OFERTA-09-14-7"
              ),
            ],
            [Markup.button.callback("‚úÖ Qabul qilaman", "accept_offer")],
          ])
        );
        console.log(
          `Step 0: Moving to Step 2 for user ${ctx.from.id} with phone ${ctx.wizard.state.phone}`
        );
        return ctx.wizard.selectStep(2); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ 1, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å
      }

      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç ‚Üí –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
      ctx.wizard.state.offerRequested = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await ctx.reply(
        "üì≤ Iltimos, telefon raqamingizni yuboring:",
        Markup.keyboard([[Markup.button.contactRequest("üìû Raqamni yuborish")]])
          .resize()
          .oneTime()
      );
      console.log(`Step 0: Requesting phone number for user ${ctx.from.id}`);
      return ctx.wizard.next();
    } catch (err) {
      console.error(`Error in Step 0 for user ${ctx.from.id}:`, err);
      await ctx.reply(
        "‚ùå Xatolik yuz berdi. Iltimos, keyinroq urinib ko‚Äòring."
      );
      return ctx.scene.leave();
    }
  },

  // Step 1: –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç
  async (ctx) => {
    try {
      console.log(
        `Step 1: Starting for user ${ctx.from.id}, message:`,
        ctx.message,
        `wizard state:`,
        ctx.wizard.state
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
      if (!ctx.message?.contact?.phone_number) {
        ctx.wizard.state.retryCount = (ctx.wizard.state.retryCount || 0) + 1;

        if (ctx.wizard.state.retryCount > 2) {
          await ctx.reply(
            "‚ùå Siz ko‚Äòp marta noto‚Äòg‚Äòri ma‚Äôlumot yubordingiz. Iltimos, /start buyrug‚Äòi bilan qaytadan boshlang.",
            Markup.removeKeyboard()
          );
          console.log(`Step 1: Too many retries for user ${ctx.from.id}`);
          return ctx.scene.leave();
        }

        await ctx.reply(
          "üì± Telefon raqamingizni faqat tugma orqali yuboring. Raqamni matn sifatida yozmang:",
          Markup.keyboard([
            [Markup.button.contactRequest("üìû Raqamni yuborish")],
          ])
            .resize()
            .oneTime()
        );
        console.log(`Step 1: Requesting phone retry for user ${ctx.from.id}`);
        return;
      }

      // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      ctx.wizard.state.phone = ctx.message.contact.phone_number;
      ctx.wizard.state.offerRequested = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
      await ctx.reply(
        "‚úÖ Telefon raqamingiz qabul qilindi.",
        Markup.removeKeyboard()
      );
      console.log(
        `Step 1: Phone received for user ${ctx.from.id}: ${ctx.wizard.state.phone}`
      );

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã
      await ctx.reply(
        "üìú Iltimos, publychnaya ofertani o‚Äòqing va qabul qilish uchun 'Qabul qilaman' tugmasini bosing:",
        Markup.inlineKeyboard([
          [
            Markup.button.url(
              "üìñ Ofertani o‚Äòqish",
              "https://telegra.ph/PUBLICHNAYA-OFERTA-09-14-7"
            ),
          ],
          [Markup.button.callback("‚úÖ Qabul qilaman", "accept_offer")],
        ])
      );
      console.log(`Step 1: Offer requested for user ${ctx.from.id}`);
      return ctx.wizard.next();
    } catch (err) {
      console.error(`Error in Step 1 for user ${ctx.from.id}:`, err);
      await ctx.reply(
        "‚ùå Xatolik yuz berdi. Iltimos, keyinroq urinib ko‚Äòring."
      );
      return ctx.scene.leave();
    }
  },

  // Step 2: –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã
  async (ctx) => {
    console.log(
      `Step 2: User ${ctx.from.id} action: ${ctx.callbackQuery?.data}, message: ${ctx.message?.text}`
    );

    if (!ctx.callbackQuery?.data || ctx.callbackQuery.data !== "accept_offer") {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–µ—Ä—Ç—É
      await ctx.reply(
        "üìú Iltimos, publychnaya ofertani o‚Äòqing va qabul qilish uchun 'Qabul qilaman' tugmasini bosing:",
        Markup.inlineKeyboard([
          [
            Markup.button.url(
              "üìñ Ofertani o‚Äòqish",
              "https://telegra.ph/PUBLICHNAYA-OFERTA-09-14-7"
            ),
          ],
          [Markup.button.callback("‚úÖ Qabul qilaman", "accept_offer")],
        ])
      );
      return;
    }

    await ctx.answerCbQuery();
    ctx.wizard.state.offer_accepted = true;
    ctx.wizard.state.page = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await ctx.reply(
      "üèõ Iltimos, koloniyani tanlang:",
      generateColonyKeyboard(ctx.wizard.state.page)
    );
    console.log(`Step 2: Moving to colony selection for user ${ctx.from.id}`);
    return ctx.wizard.next();
  },

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  // Step 3: –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∏–∏
  async (ctx) => {
    console.log(
      `Step 3: User ${ctx.from.id} action: ${ctx.callbackQuery?.data}, message: ${ctx.message?.text}`
    );

    ctx.wizard.state.page = ctx.wizard.state.page || 0; // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ page –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

    const data = ctx.callbackQuery?.data;

    if (data === "prev_colony") {
      ctx.wizard.state.page = Math.max(0, ctx.wizard.state.page - 1);
      await ctx.editMessageReplyMarkup({
        reply_markup: generateColonyKeyboard(ctx.wizard.state.page)
          .reply_markup,
      });
      return;
    }

    if (data === "next_colony") {
      const maxPage = Math.ceil(colonies.length / 6) - 1;
      ctx.wizard.state.page = Math.min(maxPage, ctx.wizard.state.page + 1);
      await ctx.editMessageReplyMarkup({
        reply_markup: generateColonyKeyboard(ctx.wizard.state.page)
          .reply_markup,
      });
      return;
    }

    if (
      !ctx.callbackQuery?.data ||
      !ctx.callbackQuery.data.startsWith("colony_")
    ) {
      await ctx.reply(
        "‚ùå Iltimos, koloniyani tanlang:",
        generateColonyKeyboard(ctx.wizard.state.page)
      );
      return;
    }

    await ctx.answerCbQuery();
    ctx.wizard.state.colony = ctx.callbackQuery.data.replace("colony_", "");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    ctx.wizard.state.relatives = [];
    ctx.wizard.state.currentRelative = {};
    ctx.wizard.state.prisoner_name = null;
    ctx.wizard.state.visit_type = null;

    await ctx.reply(
      "üìÖ Iltimos, uchrashuv turini tanlang:",
      Markup.inlineKeyboard([
        [Markup.button.callback("üîµ 1-kunlik", "short")],
        [Markup.button.callback("üü¢ 2-kunlik", "long")],
      ])
    );
    return ctx.wizard.next();
  },

  // Step 4: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∏–∑–∏—Ç–∞
  async (ctx) => {
    console.log(
      `Step 4: User ${ctx.from.id} action: ${ctx.callbackQuery?.data}`
    );
    if (
      !ctx.callbackQuery?.data ||
      (ctx.callbackQuery.data !== "long" && ctx.callbackQuery.data !== "short")
    ) {
      await ctx.reply(
        "‚ùå Iltimos, uchrashuv turini tanlang:",
        Markup.inlineKeyboard([
          [Markup.button.callback("üîµ 1-kunlik", "short")],
          [Markup.button.callback("üü¢ 2-kunlik", "long")],
        ])
      );
      return;
    }

    await ctx.answerCbQuery();
    ctx.wizard.state.visit_type = ctx.callbackQuery.data;

    await ctx.reply("üë§ Iltimos, to‚Äòliq ismingiz va familiyangizni kiriting:");
    return ctx.wizard.next();
  },

  // Step 5: Ism va familiya
  async (ctx) => {
    console.log(`Step 5: User ${ctx.from.id} sent text: ${ctx.message?.text}`);
    if (ctx.message?.text === "‚ùå Bekor qilish ariza") {
      await ctx.reply(
        "‚ùå Uchrashuv yozuvi bekor qilindi.",
        Markup.keyboard([["üìÖ Uchrashuvga yozilish"]]).resize()
      );
      return ctx.scene.leave();
    }

    if (!ctx.message?.text) {
      await ctx.reply("‚ùå Iltimos, ism va familiyani matn shaklida yuboring.");
      return ctx.wizard.selectStep(5);
    }

    ctx.wizard.state.currentRelative.full_name = ctx.message.text.toUpperCase();
    ctx.wizard.state.currentRelative.passport = "AC1234567";
    ctx.wizard.state.relatives.push(ctx.wizard.state.currentRelative);

    if (!ctx.wizard.state.prisoner_name) {
      await ctx.reply(
        "üë• Siz kim bilan uchrashmoqchisiz? Mahbusning to‚Äòliq ismini kiriting:"
      );
      return ctx.wizard.selectStep(7);
    } else {
      return askAddMore(ctx);
    }
  },

  // Step 6: Placeholder (not used)
  async (ctx) => {
    return ctx.wizard.next();
  },

  // Step 7: Mahbus ismi
  async (ctx) => {
    console.log(`Step 7: User ${ctx.from.id} sent text: ${ctx.message?.text}`);
    if (!ctx.message?.text) {
      await ctx.reply("‚ùå Iltimos, mahbusning ismini matn shaklida yuboring.");
      return ctx.wizard.selectStep(7);
    }

    ctx.wizard.state.prisoner_name = ctx.message.text.toUpperCase();
    return askAddMore(ctx);
  },

  // Step 8: Qo‚Äòshimcha qarindosh yoki yakunlash
  async (ctx) => {
    console.log(
      `Step 8: User ${ctx.from.id} action: ${ctx.callbackQuery?.data}`
    );
    if (ctx.callbackQuery) await ctx.answerCbQuery();

    if (ctx.callbackQuery?.data === "add_more") {
      if (ctx.wizard.state.relatives.length < MAX_RELATIVES) {
        ctx.wizard.state.currentRelative = {};
        await ctx.reply(
          "üë§ Yangi qarindoshning ismi va familiyasini kiriting:"
        );
        return ctx.wizard.selectStep(5);
      } else {
        await ctx.reply("‚ö†Ô∏è Maksimal 3 ta qarindosh qo‚Äòshildi.");
        return showSummary(ctx);
      }
    } else if (ctx.callbackQuery?.data === "done") {
      return showSummary(ctx);
    } else {
      // Handle unexpected inputs
      await ctx.reply(
        "‚ùå Iltimos, quyidagi tugmalardan birini bosing:",
        Markup.inlineKeyboard([
          [Markup.button.callback("Ha, qo‚Äòshaman", "add_more")],
          [Markup.button.callback("Yo‚Äòq", "done")],
        ])
      );
      return;
    }
  },

  // Step 9: Yakuniy tasdiqlash yoki bekor qilish
  async (ctx) => {
    console.log(
      `Step 9: User ${ctx.from.id} action: ${ctx.callbackQuery?.data}, message: ${ctx.message?.text}`
    );
    if (ctx.callbackQuery) await ctx.answerCbQuery();

    if (ctx.callbackQuery?.data === "confirm") {
      return saveBooking(ctx);
    } else if (ctx.callbackQuery?.data === "cancel") {
      await ctx.reply(
        "‚ùå Uchrashuv yozuvi bekor qilindi.",
        Markup.inlineKeyboard([
          [Markup.button.callback("üìÖ Uchrashuvga yozilish", "start_booking")],
        ])
      );
      return ctx.scene.leave();
    } else {
      // Handle unexpected inputs (e.g., text messages)
      await ctx.reply(
        "‚ùå Iltimos, quyidagi tugmalardan birini bosing:",
        Markup.inlineKeyboard([
          [Markup.button.callback("‚úÖ Tasdiqlash", "confirm")],
          [Markup.button.callback("‚ùå Bekor qilish ariza", "cancel")],
        ])
      );
      return;
    }
  }
);

// helper: qo‚Äòshish yoki yakunlash
async function askAddMore(ctx) {
  if (ctx.wizard.state.relatives.length < MAX_RELATIVES) {
    await ctx.reply(
      "‚ûï Yana qarindosh qo‚Äòshishni xohlaysizmi? (maksimal 3 ta)",
      Markup.inlineKeyboard([
        [Markup.button.callback("Ha, qo‚Äòshaman", "add_more")],
        [Markup.button.callback("Yo‚Äòq", "done")],
      ])
    );
    return ctx.wizard.selectStep(8);
  } else {
    await ctx.reply("‚ö†Ô∏è Maksimal 3 ta qarindosh qo‚Äòshildi.");
    return showSummary(ctx);
  }
}

// helper: ko‚Äòrsatish summary
async function showSummary(ctx) {
  const { prisoner_name, relatives, colony } = ctx.wizard.state;
  let text = "üìã Arizangiz tafsilotlari:\n\n";
  text += `üèõ Koloniya: ${colony}\n`;
  text += `üë• Mahbus: ${prisoner_name}\n\n`;
  relatives.forEach((r, i) => {
    text += `üë§ Qarindosh ${i + 1}:\n- Ism Familiya: ${r.full_name}\n`;
  });
  text += "‚ùì Ushbu ma‚Äôlumotlarni tasdiqlaysizmi?";

  await ctx.reply(
    text,
    Markup.inlineKeyboard([
      [Markup.button.callback("‚úÖ Tasdiqlash", "confirm")],
      [Markup.button.callback("‚ùå Bekor qilish ariza", "cancel")],
    ])
  );
  return ctx.wizard.selectStep(9);
}

// helper: save booking to DB
async function saveBooking(ctx) {
  const { prisoner_name, relatives, visit_type, colony } = ctx.wizard.state;
  const chatId = ctx.chat.id;
  try {
    const [result] = await pool.query(
      "INSERT INTO bookings (user_id, phone_number, visit_type, prisoner_name, relatives, colony, status, telegram_chat_id) VALUES (?, ?, ?, ?, ?, ?, 'pending', ?)",
      [
        ctx.from.id,
        ctx.wizard.state.phone,
        visit_type,
        prisoner_name,
        JSON.stringify(relatives),
        colony,
        chatId,
      ]
    );

    const bookingId = result.insertId;

    await ctx.scene.leave();

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
    await sendApplicationToAdmin(ctx, {
      relatives,
      prisoner: prisoner_name,
      id: bookingId,
      visit_type,
      colony,
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
    const [rows] = await pool.query(
      "SELECT * FROM bookings WHERE status = 'pending' ORDER BY id ASC"
    );
    const myIndex = rows.findIndex((b) => b.id === bookingId);
    if (myIndex === -1) {
      console.error("Booking ID not found in pending bookings");
      await ctx.reply("‚ùå Xatolik: Arizangiz topilmadi.");
      return;
    }
    const position = myIndex + 1;

    await ctx.reply(
      `‚úÖ Uchrashuv muvaffaqiyatli bron qilindi!\n\nüìä Sizning navbatingiz: ${position}`,
      Markup.keyboard([
        ["üìä Navbat holati"],
        [`‚ùå Arizani bekor qilish #${bookingId}`],
      ])
        .resize()
        .oneTime(false)
    );

    let groupUrl = "https://t.me/smartdunyomeet";
    if (colony === "5") {
      groupUrl = "https://t.me/SmartJIEK5";
    }

    await ctx.reply(
      "üì± Grupaga qo'shing",
      Markup.inlineKeyboard([[Markup.button.url("üìå Grupaga otish", groupUrl)]])
    );
  } catch (err) {
    console.error("Error in saveBooking:", err);
    await ctx.reply("‚ùå Xatolik yuz berdi. Iltimos, keyinroq urinib ko‚Äòring.");
  }
}

async function sendApplicationToAdmin(ctx, application) {
  const adminChatId = process.env.ADMIN_CHAT_ID;
  const firstRelative = application.relatives[0];
  const text = `üìå Yangi ariza. Nomer: ${application.id}
üë§ Arizachi: ${firstRelative ? `${firstRelative.full_name}` : "Noma'lum"}
üèõ Koloniya: ${application.colony}
üìÖ Berilgan sana: ${new Date().toLocaleString("ru-RU", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  })}
‚è≤Ô∏è Turi: ${application.visit_type === "long" ? "2-kunlik" : "1-kunlik"}
üü° Holat: Tekshiruvni kutish`;

  try {
    await ctx.reply(text);
    await ctx.telegram.sendMessage(adminChatId, text, {
      parse_mode: "Markdown",
    });
  } catch (err) {
    if (err.response && err.response.error_code === 403) {
      console.warn(
        `‚ö†Ô∏è Admin chat ${adminChatId} blocked the bot, message not sent`
      );
    } else {
      console.error("Error sending to admin:", err);
    }
  }
}

module.exports = bookingWizard;
